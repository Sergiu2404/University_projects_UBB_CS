%{
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "y.tab.h"  // Include the header file generated by yacc/bison
%}

%union {
    int num;
    char* str;
}

%token <str> IDENTIFIER STRING_CONST CHAR_CONST
%token <num> NUMBER_CONST

%token INT STRING CHAR READ WRITE IF ELSE FOR WHILE RETURN START ARRAY
%token plus minus mul division mod lessOrEqual moreOrEqual less more equal different eq
%token leftCurlyBracket rightCurlyBracket leftRoundBracket rightRoundBracket leftBracket rightBracket colon semicolon comma apostrophe quote
%type <str> expression

%%

program:
    start block { printf("Program parsed successfully.\n"); }
;

start:
    START { printf("Start program\n"); }
;

block:
    declarations statements { printf("Block processed\n"); }
;

declarations:
    declaration declarations
    | /* empty */
;

declaration:
    type IDENTIFIER semicolon { printf("Declaration of type: %s with identifier: %s\n", $1, $2); }
;

type:
    INT { $$ = "int"; }
    | STRING { $$ = "string"; }
    | CHAR { $$ = "char"; }
;

statements:
    statement statements
    | /* empty */
;

statement:
    var_declaration
    | assignment
    | conditional
    | function_call
    | loop
;

var_declaration:
    IDENTIFIER eq expression semicolon { printf("Variable declared: %s = %s\n", $1, $3); }
;

assignment:
    IDENTIFIER eq expression semicolon { printf("Assignment: %s = %s\n", $1, $3); }
;

conditional:
    IF leftRoundBracket expression rightRoundBracket block ELSE block
    | IF leftRoundBracket expression rightRoundBracket block
;

loop:
    WHILE leftRoundBracket expression rightRoundBracket block
    | FOR leftRoundBracket expression semicolon expression semicolon expression rightRoundBracket block
;

function_call:
    READ leftRoundBracket IDENTIFIER rightRoundBracket semicolon { printf("Function call: read %s\n", $3); }
    | WRITE leftRoundBracket expression rightRoundBracket semicolon { printf("Function call: write %s\n", $3); }
;

expression:
    IDENTIFIER { $$ = $1; }
    | NUMBER_CONST { $$ = $1; }
    | STRING_CONST { $$ = $1; }
    | CHAR_CONST { $$ = $1; }
    | expression plus expression { $$ = $1 + $3; }
    | expression minus expression { $$ = $1 - $3; }
    | expression mul expression { $$ = $1 * $3; }
    | expression division expression { $$ = $1 / $3; }
    | expression mod expression { $$ = $1 % $3; }
    | leftRoundBracket expression rightRoundBracket { $$ = $2; }
    | expression lessOrEqual expression { $$ = $1 <= $3; }
    | expression moreOrEqual expression { $$ = $1 >= $3; }
    | expression less expression { $$ = $1 < $3; }
    | expression more expression { $$ = $1 > $3; }
    | expression equal expression { $$ = $1 == $3; }
    | expression different expression { $$ = $1 != $3; }
;

%%

int main(int argc, char **argv) {
    if(argc > 1) yyin = fopen(argv[1], "r");
    if(!yyparse()) {
        printf("Parsing completed successfully!\n");
    } else {
        printf("Parsing failed!\n");
    }
    return 0;
}

yyerror(char *s) {
    printf("Error: %s\n", s);
}
