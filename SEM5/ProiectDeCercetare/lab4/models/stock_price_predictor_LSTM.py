# -*- coding: utf-8 -*-
"""Untitled7.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Ve2UWk6VejV4YrB843tfhlNfo-Ozg-34
"""

# stock price predictor using LSTM approach


import yfinance as yf
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.preprocessing import MinMaxScaler
from sklearn.model_selection import train_test_split
import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense

# Download the stock data for INDUSINDBK
ticker = 'INDUSINDBK.NS'
start_date = "2010-01-01"
end_date = "2023-06-22"
stock_data = yf.download(ticker, start=start_date, end=end_date)

# Check if data is loaded correctly
print(stock_data.head())

# Select relevant columns for LSTM input (e.g., 'Close' price)
data = stock_data[['Close']]

# Normalize the data using MinMaxScaler (scaling between 0 and 1)
scaler = MinMaxScaler(feature_range=(0, 1))
scaled_data = scaler.fit_transform(data)

# Prepare the data for LSTM
def create_dataset(data, time_step=60):
    X, y = [], []
    for i in range(time_step, len(data)):
        X.append(data[i-time_step:i, 0])  # Input sequence
        y.append(data[i, 0])  # The price we want to predict
    return np.array(X), np.array(y)

# Create train and test datasets
time_step = 60  # Lookback window for LSTM
X, y = create_dataset(scaled_data, time_step)

# Split into train and test sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, shuffle=False)

# Reshape input to be 3D as required by LSTM (samples, time_step, features)
X_train = X_train.reshape(X_train.shape[0], X_train.shape[1], 1)
X_test = X_test.reshape(X_test.shape[0], X_test.shape[1], 1)

# Build the LSTM model
model = Sequential()
model.add(LSTM(units=64, return_sequences=True, input_shape=(X_train.shape[1], 1)))
model.add(LSTM(units=64, return_sequences=False))
model.add(Dense(units=1))  # Output layer to predict the closing price

model.compile(optimizer='adam', loss='mean_squared_error')

# Train the model
model.fit(X_train, y_train, epochs=10, batch_size=32)

# Evaluate the model on test data
test_loss = model.evaluate(X_test, y_test)
print(f"Test Loss: {test_loss}")

# Make predictions on the test set
predictions = model.predict(X_test)

# Inverse transform to get the actual stock prices
predicted_prices = scaler.inverse_transform(predictions)
actual_prices = scaler.inverse_transform(y_test.reshape(-1, 1))

# Plotting the results
plt.figure(figsize=(12, 6))
plt.plot(actual_prices, label="Actual Prices")
plt.plot(predicted_prices, label="Predicted Prices")
plt.title(f"{ticker} - Actual vs Predicted Stock Prices")
plt.xlabel("Time")
plt.ylabel("Stock Price")
plt.legend()
plt.show()