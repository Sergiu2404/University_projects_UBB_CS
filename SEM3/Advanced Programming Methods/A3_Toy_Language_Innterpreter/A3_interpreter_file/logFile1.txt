ExeStack: 
CompoundStmt{stmt1=VarDeclStmt{variable name='a', variable type=integer}, stmt2=CompoundStmt{stmt1=VarDeclStmt{variable name='b', variable type=integer}, stmt2=CompoundStmt{stmt1=VarDeclStmt{variable name='bool1', variable type=boolean}, stmt2=CompoundStmt{stmt1=VarDeclStmt{variable name='bool2', variable type=boolean}, stmt2=CompoundStmt{stmt1=AssignStmt{var name='a', expToAssign=ValueExpression{value=100}}, stmt2=CompoundStmt{stmt1=AssignStmt{var name='b', expToAssign=ValueExpression{value=100}}, stmt2=CompoundStmt{stmt1=AssignStmt{var name='bool1', expToAssign=ValueExpression{value=true}}, stmt2=CompoundStmt{stmt1=AssignStmt{var name='bool2', expToAssign=ValueExpression{value=false}}, stmt2=CompoundStmt{stmt1=IfStmt{expToEval=LogicalExpression{e1=VariableExpression{variableExp='bool1'} &&  e2=VariableExpression{variableExp='bool2'}}, thenStmt=AssignStmt{var name='a', expToAssign=ArithmeticExpression{exp1=VariableExpression{variableExp='a'} + , exp2=ValueExpression{value=77}}}, elseStmt=AssignStmt{var name='b', expToAssign=ArithmeticExpression{exp1=VariableExpression{variableExp='b'} - , exp2=ValueExpression{value=77}}}}, stmt2=CompoundStmt{stmt1=PrintStmt{exp=VariableExpression{variableExp='a'}}, stmt2=PrintStmt{exp=VariableExpression{variableExp='b'}}}}}}}}}}}}

Symbol Table: 

Output List: 

File Table: 

END

ExeStack: 
CompoundStmt{stmt1=VarDeclStmt{variable name='b', variable type=integer}, stmt2=CompoundStmt{stmt1=VarDeclStmt{variable name='bool1', variable type=boolean}, stmt2=CompoundStmt{stmt1=VarDeclStmt{variable name='bool2', variable type=boolean}, stmt2=CompoundStmt{stmt1=AssignStmt{var name='a', expToAssign=ValueExpression{value=100}}, stmt2=CompoundStmt{stmt1=AssignStmt{var name='b', expToAssign=ValueExpression{value=100}}, stmt2=CompoundStmt{stmt1=AssignStmt{var name='bool1', expToAssign=ValueExpression{value=true}}, stmt2=CompoundStmt{stmt1=AssignStmt{var name='bool2', expToAssign=ValueExpression{value=false}}, stmt2=CompoundStmt{stmt1=IfStmt{expToEval=LogicalExpression{e1=VariableExpression{variableExp='bool1'} &&  e2=VariableExpression{variableExp='bool2'}}, thenStmt=AssignStmt{var name='a', expToAssign=ArithmeticExpression{exp1=VariableExpression{variableExp='a'} + , exp2=ValueExpression{value=77}}}, elseStmt=AssignStmt{var name='b', expToAssign=ArithmeticExpression{exp1=VariableExpression{variableExp='b'} - , exp2=ValueExpression{value=77}}}}, stmt2=CompoundStmt{stmt1=PrintStmt{exp=VariableExpression{variableExp='a'}}, stmt2=PrintStmt{exp=VariableExpression{variableExp='b'}}}}}}}}}}}
VarDeclStmt{variable name='a', variable type=integer}
CompoundStmt{stmt1=VarDeclStmt{variable name='b', variable type=integer}, stmt2=CompoundStmt{stmt1=VarDeclStmt{variable name='bool1', variable type=boolean}, stmt2=CompoundStmt{stmt1=VarDeclStmt{variable name='bool2', variable type=boolean}, stmt2=CompoundStmt{stmt1=AssignStmt{var name='a', expToAssign=ValueExpression{value=100}}, stmt2=CompoundStmt{stmt1=AssignStmt{var name='b', expToAssign=ValueExpression{value=100}}, stmt2=CompoundStmt{stmt1=AssignStmt{var name='bool1', expToAssign=ValueExpression{value=true}}, stmt2=CompoundStmt{stmt1=AssignStmt{var name='bool2', expToAssign=ValueExpression{value=false}}, stmt2=CompoundStmt{stmt1=IfStmt{expToEval=LogicalExpression{e1=VariableExpression{variableExp='bool1'} &&  e2=VariableExpression{variableExp='bool2'}}, thenStmt=AssignStmt{var name='a', expToAssign=ArithmeticExpression{exp1=VariableExpression{variableExp='a'} + , exp2=ValueExpression{value=77}}}, elseStmt=AssignStmt{var name='b', expToAssign=ArithmeticExpression{exp1=VariableExpression{variableExp='b'} - , exp2=ValueExpression{value=77}}}}, stmt2=CompoundStmt{stmt1=PrintStmt{exp=VariableExpression{variableExp='a'}}, stmt2=PrintStmt{exp=VariableExpression{variableExp='b'}}}}}}}}}}}

Symbol Table: 

Output List: 

File Table: 

END

ExeStack: 
CompoundStmt{stmt1=VarDeclStmt{variable name='b', variable type=integer}, stmt2=CompoundStmt{stmt1=VarDeclStmt{variable name='bool1', variable type=boolean}, stmt2=CompoundStmt{stmt1=VarDeclStmt{variable name='bool2', variable type=boolean}, stmt2=CompoundStmt{stmt1=AssignStmt{var name='a', expToAssign=ValueExpression{value=100}}, stmt2=CompoundStmt{stmt1=AssignStmt{var name='b', expToAssign=ValueExpression{value=100}}, stmt2=CompoundStmt{stmt1=AssignStmt{var name='bool1', expToAssign=ValueExpression{value=true}}, stmt2=CompoundStmt{stmt1=AssignStmt{var name='bool2', expToAssign=ValueExpression{value=false}}, stmt2=CompoundStmt{stmt1=IfStmt{expToEval=LogicalExpression{e1=VariableExpression{variableExp='bool1'} &&  e2=VariableExpression{variableExp='bool2'}}, thenStmt=AssignStmt{var name='a', expToAssign=ArithmeticExpression{exp1=VariableExpression{variableExp='a'} + , exp2=ValueExpression{value=77}}}, elseStmt=AssignStmt{var name='b', expToAssign=ArithmeticExpression{exp1=VariableExpression{variableExp='b'} - , exp2=ValueExpression{value=77}}}}, stmt2=CompoundStmt{stmt1=PrintStmt{exp=VariableExpression{variableExp='a'}}, stmt2=PrintStmt{exp=VariableExpression{variableExp='b'}}}}}}}}}}}

Symbol Table: 
a -> 0

Output List: 

File Table: 

END

ExeStack: 
CompoundStmt{stmt1=VarDeclStmt{variable name='bool1', variable type=boolean}, stmt2=CompoundStmt{stmt1=VarDeclStmt{variable name='bool2', variable type=boolean}, stmt2=CompoundStmt{stmt1=AssignStmt{var name='a', expToAssign=ValueExpression{value=100}}, stmt2=CompoundStmt{stmt1=AssignStmt{var name='b', expToAssign=ValueExpression{value=100}}, stmt2=CompoundStmt{stmt1=AssignStmt{var name='bool1', expToAssign=ValueExpression{value=true}}, stmt2=CompoundStmt{stmt1=AssignStmt{var name='bool2', expToAssign=ValueExpression{value=false}}, stmt2=CompoundStmt{stmt1=IfStmt{expToEval=LogicalExpression{e1=VariableExpression{variableExp='bool1'} &&  e2=VariableExpression{variableExp='bool2'}}, thenStmt=AssignStmt{var name='a', expToAssign=ArithmeticExpression{exp1=VariableExpression{variableExp='a'} + , exp2=ValueExpression{value=77}}}, elseStmt=AssignStmt{var name='b', expToAssign=ArithmeticExpression{exp1=VariableExpression{variableExp='b'} - , exp2=ValueExpression{value=77}}}}, stmt2=CompoundStmt{stmt1=PrintStmt{exp=VariableExpression{variableExp='a'}}, stmt2=PrintStmt{exp=VariableExpression{variableExp='b'}}}}}}}}}}
VarDeclStmt{variable name='b', variable type=integer}
CompoundStmt{stmt1=VarDeclStmt{variable name='bool1', variable type=boolean}, stmt2=CompoundStmt{stmt1=VarDeclStmt{variable name='bool2', variable type=boolean}, stmt2=CompoundStmt{stmt1=AssignStmt{var name='a', expToAssign=ValueExpression{value=100}}, stmt2=CompoundStmt{stmt1=AssignStmt{var name='b', expToAssign=ValueExpression{value=100}}, stmt2=CompoundStmt{stmt1=AssignStmt{var name='bool1', expToAssign=ValueExpression{value=true}}, stmt2=CompoundStmt{stmt1=AssignStmt{var name='bool2', expToAssign=ValueExpression{value=false}}, stmt2=CompoundStmt{stmt1=IfStmt{expToEval=LogicalExpression{e1=VariableExpression{variableExp='bool1'} &&  e2=VariableExpression{variableExp='bool2'}}, thenStmt=AssignStmt{var name='a', expToAssign=ArithmeticExpression{exp1=VariableExpression{variableExp='a'} + , exp2=ValueExpression{value=77}}}, elseStmt=AssignStmt{var name='b', expToAssign=ArithmeticExpression{exp1=VariableExpression{variableExp='b'} - , exp2=ValueExpression{value=77}}}}, stmt2=CompoundStmt{stmt1=PrintStmt{exp=VariableExpression{variableExp='a'}}, stmt2=PrintStmt{exp=VariableExpression{variableExp='b'}}}}}}}}}}

Symbol Table: 
a -> 0

Output List: 

File Table: 

END

ExeStack: 
CompoundStmt{stmt1=VarDeclStmt{variable name='bool1', variable type=boolean}, stmt2=CompoundStmt{stmt1=VarDeclStmt{variable name='bool2', variable type=boolean}, stmt2=CompoundStmt{stmt1=AssignStmt{var name='a', expToAssign=ValueExpression{value=100}}, stmt2=CompoundStmt{stmt1=AssignStmt{var name='b', expToAssign=ValueExpression{value=100}}, stmt2=CompoundStmt{stmt1=AssignStmt{var name='bool1', expToAssign=ValueExpression{value=true}}, stmt2=CompoundStmt{stmt1=AssignStmt{var name='bool2', expToAssign=ValueExpression{value=false}}, stmt2=CompoundStmt{stmt1=IfStmt{expToEval=LogicalExpression{e1=VariableExpression{variableExp='bool1'} &&  e2=VariableExpression{variableExp='bool2'}}, thenStmt=AssignStmt{var name='a', expToAssign=ArithmeticExpression{exp1=VariableExpression{variableExp='a'} + , exp2=ValueExpression{value=77}}}, elseStmt=AssignStmt{var name='b', expToAssign=ArithmeticExpression{exp1=VariableExpression{variableExp='b'} - , exp2=ValueExpression{value=77}}}}, stmt2=CompoundStmt{stmt1=PrintStmt{exp=VariableExpression{variableExp='a'}}, stmt2=PrintStmt{exp=VariableExpression{variableExp='b'}}}}}}}}}}

Symbol Table: 
a -> 0
b -> 0

Output List: 

File Table: 

END

ExeStack: 
CompoundStmt{stmt1=VarDeclStmt{variable name='bool2', variable type=boolean}, stmt2=CompoundStmt{stmt1=AssignStmt{var name='a', expToAssign=ValueExpression{value=100}}, stmt2=CompoundStmt{stmt1=AssignStmt{var name='b', expToAssign=ValueExpression{value=100}}, stmt2=CompoundStmt{stmt1=AssignStmt{var name='bool1', expToAssign=ValueExpression{value=true}}, stmt2=CompoundStmt{stmt1=AssignStmt{var name='bool2', expToAssign=ValueExpression{value=false}}, stmt2=CompoundStmt{stmt1=IfStmt{expToEval=LogicalExpression{e1=VariableExpression{variableExp='bool1'} &&  e2=VariableExpression{variableExp='bool2'}}, thenStmt=AssignStmt{var name='a', expToAssign=ArithmeticExpression{exp1=VariableExpression{variableExp='a'} + , exp2=ValueExpression{value=77}}}, elseStmt=AssignStmt{var name='b', expToAssign=ArithmeticExpression{exp1=VariableExpression{variableExp='b'} - , exp2=ValueExpression{value=77}}}}, stmt2=CompoundStmt{stmt1=PrintStmt{exp=VariableExpression{variableExp='a'}}, stmt2=PrintStmt{exp=VariableExpression{variableExp='b'}}}}}}}}}
VarDeclStmt{variable name='bool1', variable type=boolean}
CompoundStmt{stmt1=VarDeclStmt{variable name='bool2', variable type=boolean}, stmt2=CompoundStmt{stmt1=AssignStmt{var name='a', expToAssign=ValueExpression{value=100}}, stmt2=CompoundStmt{stmt1=AssignStmt{var name='b', expToAssign=ValueExpression{value=100}}, stmt2=CompoundStmt{stmt1=AssignStmt{var name='bool1', expToAssign=ValueExpression{value=true}}, stmt2=CompoundStmt{stmt1=AssignStmt{var name='bool2', expToAssign=ValueExpression{value=false}}, stmt2=CompoundStmt{stmt1=IfStmt{expToEval=LogicalExpression{e1=VariableExpression{variableExp='bool1'} &&  e2=VariableExpression{variableExp='bool2'}}, thenStmt=AssignStmt{var name='a', expToAssign=ArithmeticExpression{exp1=VariableExpression{variableExp='a'} + , exp2=ValueExpression{value=77}}}, elseStmt=AssignStmt{var name='b', expToAssign=ArithmeticExpression{exp1=VariableExpression{variableExp='b'} - , exp2=ValueExpression{value=77}}}}, stmt2=CompoundStmt{stmt1=PrintStmt{exp=VariableExpression{variableExp='a'}}, stmt2=PrintStmt{exp=VariableExpression{variableExp='b'}}}}}}}}}

Symbol Table: 
a -> 0
b -> 0

Output List: 

File Table: 

END

ExeStack: 
CompoundStmt{stmt1=VarDeclStmt{variable name='bool2', variable type=boolean}, stmt2=CompoundStmt{stmt1=AssignStmt{var name='a', expToAssign=ValueExpression{value=100}}, stmt2=CompoundStmt{stmt1=AssignStmt{var name='b', expToAssign=ValueExpression{value=100}}, stmt2=CompoundStmt{stmt1=AssignStmt{var name='bool1', expToAssign=ValueExpression{value=true}}, stmt2=CompoundStmt{stmt1=AssignStmt{var name='bool2', expToAssign=ValueExpression{value=false}}, stmt2=CompoundStmt{stmt1=IfStmt{expToEval=LogicalExpression{e1=VariableExpression{variableExp='bool1'} &&  e2=VariableExpression{variableExp='bool2'}}, thenStmt=AssignStmt{var name='a', expToAssign=ArithmeticExpression{exp1=VariableExpression{variableExp='a'} + , exp2=ValueExpression{value=77}}}, elseStmt=AssignStmt{var name='b', expToAssign=ArithmeticExpression{exp1=VariableExpression{variableExp='b'} - , exp2=ValueExpression{value=77}}}}, stmt2=CompoundStmt{stmt1=PrintStmt{exp=VariableExpression{variableExp='a'}}, stmt2=PrintStmt{exp=VariableExpression{variableExp='b'}}}}}}}}}

Symbol Table: 
a -> 0
b -> 0
bool1 -> false

Output List: 

File Table: 

END

ExeStack: 
CompoundStmt{stmt1=AssignStmt{var name='a', expToAssign=ValueExpression{value=100}}, stmt2=CompoundStmt{stmt1=AssignStmt{var name='b', expToAssign=ValueExpression{value=100}}, stmt2=CompoundStmt{stmt1=AssignStmt{var name='bool1', expToAssign=ValueExpression{value=true}}, stmt2=CompoundStmt{stmt1=AssignStmt{var name='bool2', expToAssign=ValueExpression{value=false}}, stmt2=CompoundStmt{stmt1=IfStmt{expToEval=LogicalExpression{e1=VariableExpression{variableExp='bool1'} &&  e2=VariableExpression{variableExp='bool2'}}, thenStmt=AssignStmt{var name='a', expToAssign=ArithmeticExpression{exp1=VariableExpression{variableExp='a'} + , exp2=ValueExpression{value=77}}}, elseStmt=AssignStmt{var name='b', expToAssign=ArithmeticExpression{exp1=VariableExpression{variableExp='b'} - , exp2=ValueExpression{value=77}}}}, stmt2=CompoundStmt{stmt1=PrintStmt{exp=VariableExpression{variableExp='a'}}, stmt2=PrintStmt{exp=VariableExpression{variableExp='b'}}}}}}}}
VarDeclStmt{variable name='bool2', variable type=boolean}
CompoundStmt{stmt1=AssignStmt{var name='a', expToAssign=ValueExpression{value=100}}, stmt2=CompoundStmt{stmt1=AssignStmt{var name='b', expToAssign=ValueExpression{value=100}}, stmt2=CompoundStmt{stmt1=AssignStmt{var name='bool1', expToAssign=ValueExpression{value=true}}, stmt2=CompoundStmt{stmt1=AssignStmt{var name='bool2', expToAssign=ValueExpression{value=false}}, stmt2=CompoundStmt{stmt1=IfStmt{expToEval=LogicalExpression{e1=VariableExpression{variableExp='bool1'} &&  e2=VariableExpression{variableExp='bool2'}}, thenStmt=AssignStmt{var name='a', expToAssign=ArithmeticExpression{exp1=VariableExpression{variableExp='a'} + , exp2=ValueExpression{value=77}}}, elseStmt=AssignStmt{var name='b', expToAssign=ArithmeticExpression{exp1=VariableExpression{variableExp='b'} - , exp2=ValueExpression{value=77}}}}, stmt2=CompoundStmt{stmt1=PrintStmt{exp=VariableExpression{variableExp='a'}}, stmt2=PrintStmt{exp=VariableExpression{variableExp='b'}}}}}}}}

Symbol Table: 
a -> 0
b -> 0
bool1 -> false

Output List: 

File Table: 

END

ExeStack: 
CompoundStmt{stmt1=AssignStmt{var name='a', expToAssign=ValueExpression{value=100}}, stmt2=CompoundStmt{stmt1=AssignStmt{var name='b', expToAssign=ValueExpression{value=100}}, stmt2=CompoundStmt{stmt1=AssignStmt{var name='bool1', expToAssign=ValueExpression{value=true}}, stmt2=CompoundStmt{stmt1=AssignStmt{var name='bool2', expToAssign=ValueExpression{value=false}}, stmt2=CompoundStmt{stmt1=IfStmt{expToEval=LogicalExpression{e1=VariableExpression{variableExp='bool1'} &&  e2=VariableExpression{variableExp='bool2'}}, thenStmt=AssignStmt{var name='a', expToAssign=ArithmeticExpression{exp1=VariableExpression{variableExp='a'} + , exp2=ValueExpression{value=77}}}, elseStmt=AssignStmt{var name='b', expToAssign=ArithmeticExpression{exp1=VariableExpression{variableExp='b'} - , exp2=ValueExpression{value=77}}}}, stmt2=CompoundStmt{stmt1=PrintStmt{exp=VariableExpression{variableExp='a'}}, stmt2=PrintStmt{exp=VariableExpression{variableExp='b'}}}}}}}}

Symbol Table: 
a -> 0
bool2 -> false
b -> 0
bool1 -> false

Output List: 

File Table: 

END

ExeStack: 
CompoundStmt{stmt1=AssignStmt{var name='b', expToAssign=ValueExpression{value=100}}, stmt2=CompoundStmt{stmt1=AssignStmt{var name='bool1', expToAssign=ValueExpression{value=true}}, stmt2=CompoundStmt{stmt1=AssignStmt{var name='bool2', expToAssign=ValueExpression{value=false}}, stmt2=CompoundStmt{stmt1=IfStmt{expToEval=LogicalExpression{e1=VariableExpression{variableExp='bool1'} &&  e2=VariableExpression{variableExp='bool2'}}, thenStmt=AssignStmt{var name='a', expToAssign=ArithmeticExpression{exp1=VariableExpression{variableExp='a'} + , exp2=ValueExpression{value=77}}}, elseStmt=AssignStmt{var name='b', expToAssign=ArithmeticExpression{exp1=VariableExpression{variableExp='b'} - , exp2=ValueExpression{value=77}}}}, stmt2=CompoundStmt{stmt1=PrintStmt{exp=VariableExpression{variableExp='a'}}, stmt2=PrintStmt{exp=VariableExpression{variableExp='b'}}}}}}}
AssignStmt{var name='a', expToAssign=ValueExpression{value=100}}
CompoundStmt{stmt1=AssignStmt{var name='b', expToAssign=ValueExpression{value=100}}, stmt2=CompoundStmt{stmt1=AssignStmt{var name='bool1', expToAssign=ValueExpression{value=true}}, stmt2=CompoundStmt{stmt1=AssignStmt{var name='bool2', expToAssign=ValueExpression{value=false}}, stmt2=CompoundStmt{stmt1=IfStmt{expToEval=LogicalExpression{e1=VariableExpression{variableExp='bool1'} &&  e2=VariableExpression{variableExp='bool2'}}, thenStmt=AssignStmt{var name='a', expToAssign=ArithmeticExpression{exp1=VariableExpression{variableExp='a'} + , exp2=ValueExpression{value=77}}}, elseStmt=AssignStmt{var name='b', expToAssign=ArithmeticExpression{exp1=VariableExpression{variableExp='b'} - , exp2=ValueExpression{value=77}}}}, stmt2=CompoundStmt{stmt1=PrintStmt{exp=VariableExpression{variableExp='a'}}, stmt2=PrintStmt{exp=VariableExpression{variableExp='b'}}}}}}}

Symbol Table: 
a -> 0
bool2 -> false
b -> 0
bool1 -> false

Output List: 

File Table: 

END

ExeStack: 
CompoundStmt{stmt1=AssignStmt{var name='b', expToAssign=ValueExpression{value=100}}, stmt2=CompoundStmt{stmt1=AssignStmt{var name='bool1', expToAssign=ValueExpression{value=true}}, stmt2=CompoundStmt{stmt1=AssignStmt{var name='bool2', expToAssign=ValueExpression{value=false}}, stmt2=CompoundStmt{stmt1=IfStmt{expToEval=LogicalExpression{e1=VariableExpression{variableExp='bool1'} &&  e2=VariableExpression{variableExp='bool2'}}, thenStmt=AssignStmt{var name='a', expToAssign=ArithmeticExpression{exp1=VariableExpression{variableExp='a'} + , exp2=ValueExpression{value=77}}}, elseStmt=AssignStmt{var name='b', expToAssign=ArithmeticExpression{exp1=VariableExpression{variableExp='b'} - , exp2=ValueExpression{value=77}}}}, stmt2=CompoundStmt{stmt1=PrintStmt{exp=VariableExpression{variableExp='a'}}, stmt2=PrintStmt{exp=VariableExpression{variableExp='b'}}}}}}}

Symbol Table: 
a -> 100
bool2 -> false
b -> 0
bool1 -> false

Output List: 

File Table: 

END

ExeStack: 
CompoundStmt{stmt1=AssignStmt{var name='bool1', expToAssign=ValueExpression{value=true}}, stmt2=CompoundStmt{stmt1=AssignStmt{var name='bool2', expToAssign=ValueExpression{value=false}}, stmt2=CompoundStmt{stmt1=IfStmt{expToEval=LogicalExpression{e1=VariableExpression{variableExp='bool1'} &&  e2=VariableExpression{variableExp='bool2'}}, thenStmt=AssignStmt{var name='a', expToAssign=ArithmeticExpression{exp1=VariableExpression{variableExp='a'} + , exp2=ValueExpression{value=77}}}, elseStmt=AssignStmt{var name='b', expToAssign=ArithmeticExpression{exp1=VariableExpression{variableExp='b'} - , exp2=ValueExpression{value=77}}}}, stmt2=CompoundStmt{stmt1=PrintStmt{exp=VariableExpression{variableExp='a'}}, stmt2=PrintStmt{exp=VariableExpression{variableExp='b'}}}}}}
AssignStmt{var name='b', expToAssign=ValueExpression{value=100}}
CompoundStmt{stmt1=AssignStmt{var name='bool1', expToAssign=ValueExpression{value=true}}, stmt2=CompoundStmt{stmt1=AssignStmt{var name='bool2', expToAssign=ValueExpression{value=false}}, stmt2=CompoundStmt{stmt1=IfStmt{expToEval=LogicalExpression{e1=VariableExpression{variableExp='bool1'} &&  e2=VariableExpression{variableExp='bool2'}}, thenStmt=AssignStmt{var name='a', expToAssign=ArithmeticExpression{exp1=VariableExpression{variableExp='a'} + , exp2=ValueExpression{value=77}}}, elseStmt=AssignStmt{var name='b', expToAssign=ArithmeticExpression{exp1=VariableExpression{variableExp='b'} - , exp2=ValueExpression{value=77}}}}, stmt2=CompoundStmt{stmt1=PrintStmt{exp=VariableExpression{variableExp='a'}}, stmt2=PrintStmt{exp=VariableExpression{variableExp='b'}}}}}}

Symbol Table: 
a -> 100
bool2 -> false
b -> 0
bool1 -> false

Output List: 

File Table: 

END

ExeStack: 
CompoundStmt{stmt1=AssignStmt{var name='bool1', expToAssign=ValueExpression{value=true}}, stmt2=CompoundStmt{stmt1=AssignStmt{var name='bool2', expToAssign=ValueExpression{value=false}}, stmt2=CompoundStmt{stmt1=IfStmt{expToEval=LogicalExpression{e1=VariableExpression{variableExp='bool1'} &&  e2=VariableExpression{variableExp='bool2'}}, thenStmt=AssignStmt{var name='a', expToAssign=ArithmeticExpression{exp1=VariableExpression{variableExp='a'} + , exp2=ValueExpression{value=77}}}, elseStmt=AssignStmt{var name='b', expToAssign=ArithmeticExpression{exp1=VariableExpression{variableExp='b'} - , exp2=ValueExpression{value=77}}}}, stmt2=CompoundStmt{stmt1=PrintStmt{exp=VariableExpression{variableExp='a'}}, stmt2=PrintStmt{exp=VariableExpression{variableExp='b'}}}}}}

Symbol Table: 
a -> 100
bool2 -> false
b -> 100
bool1 -> false

Output List: 

File Table: 

END

ExeStack: 
CompoundStmt{stmt1=AssignStmt{var name='bool2', expToAssign=ValueExpression{value=false}}, stmt2=CompoundStmt{stmt1=IfStmt{expToEval=LogicalExpression{e1=VariableExpression{variableExp='bool1'} &&  e2=VariableExpression{variableExp='bool2'}}, thenStmt=AssignStmt{var name='a', expToAssign=ArithmeticExpression{exp1=VariableExpression{variableExp='a'} + , exp2=ValueExpression{value=77}}}, elseStmt=AssignStmt{var name='b', expToAssign=ArithmeticExpression{exp1=VariableExpression{variableExp='b'} - , exp2=ValueExpression{value=77}}}}, stmt2=CompoundStmt{stmt1=PrintStmt{exp=VariableExpression{variableExp='a'}}, stmt2=PrintStmt{exp=VariableExpression{variableExp='b'}}}}}
AssignStmt{var name='bool1', expToAssign=ValueExpression{value=true}}
CompoundStmt{stmt1=AssignStmt{var name='bool2', expToAssign=ValueExpression{value=false}}, stmt2=CompoundStmt{stmt1=IfStmt{expToEval=LogicalExpression{e1=VariableExpression{variableExp='bool1'} &&  e2=VariableExpression{variableExp='bool2'}}, thenStmt=AssignStmt{var name='a', expToAssign=ArithmeticExpression{exp1=VariableExpression{variableExp='a'} + , exp2=ValueExpression{value=77}}}, elseStmt=AssignStmt{var name='b', expToAssign=ArithmeticExpression{exp1=VariableExpression{variableExp='b'} - , exp2=ValueExpression{value=77}}}}, stmt2=CompoundStmt{stmt1=PrintStmt{exp=VariableExpression{variableExp='a'}}, stmt2=PrintStmt{exp=VariableExpression{variableExp='b'}}}}}

Symbol Table: 
a -> 100
bool2 -> false
b -> 100
bool1 -> false

Output List: 

File Table: 

END

ExeStack: 
CompoundStmt{stmt1=AssignStmt{var name='bool2', expToAssign=ValueExpression{value=false}}, stmt2=CompoundStmt{stmt1=IfStmt{expToEval=LogicalExpression{e1=VariableExpression{variableExp='bool1'} &&  e2=VariableExpression{variableExp='bool2'}}, thenStmt=AssignStmt{var name='a', expToAssign=ArithmeticExpression{exp1=VariableExpression{variableExp='a'} + , exp2=ValueExpression{value=77}}}, elseStmt=AssignStmt{var name='b', expToAssign=ArithmeticExpression{exp1=VariableExpression{variableExp='b'} - , exp2=ValueExpression{value=77}}}}, stmt2=CompoundStmt{stmt1=PrintStmt{exp=VariableExpression{variableExp='a'}}, stmt2=PrintStmt{exp=VariableExpression{variableExp='b'}}}}}

Symbol Table: 
a -> 100
bool2 -> false
b -> 100
bool1 -> true

Output List: 

File Table: 

END

ExeStack: 
CompoundStmt{stmt1=IfStmt{expToEval=LogicalExpression{e1=VariableExpression{variableExp='bool1'} &&  e2=VariableExpression{variableExp='bool2'}}, thenStmt=AssignStmt{var name='a', expToAssign=ArithmeticExpression{exp1=VariableExpression{variableExp='a'} + , exp2=ValueExpression{value=77}}}, elseStmt=AssignStmt{var name='b', expToAssign=ArithmeticExpression{exp1=VariableExpression{variableExp='b'} - , exp2=ValueExpression{value=77}}}}, stmt2=CompoundStmt{stmt1=PrintStmt{exp=VariableExpression{variableExp='a'}}, stmt2=PrintStmt{exp=VariableExpression{variableExp='b'}}}}
AssignStmt{var name='bool2', expToAssign=ValueExpression{value=false}}
CompoundStmt{stmt1=IfStmt{expToEval=LogicalExpression{e1=VariableExpression{variableExp='bool1'} &&  e2=VariableExpression{variableExp='bool2'}}, thenStmt=AssignStmt{var name='a', expToAssign=ArithmeticExpression{exp1=VariableExpression{variableExp='a'} + , exp2=ValueExpression{value=77}}}, elseStmt=AssignStmt{var name='b', expToAssign=ArithmeticExpression{exp1=VariableExpression{variableExp='b'} - , exp2=ValueExpression{value=77}}}}, stmt2=CompoundStmt{stmt1=PrintStmt{exp=VariableExpression{variableExp='a'}}, stmt2=PrintStmt{exp=VariableExpression{variableExp='b'}}}}

Symbol Table: 
a -> 100
bool2 -> false
b -> 100
bool1 -> true

Output List: 

File Table: 

END

ExeStack: 
CompoundStmt{stmt1=IfStmt{expToEval=LogicalExpression{e1=VariableExpression{variableExp='bool1'} &&  e2=VariableExpression{variableExp='bool2'}}, thenStmt=AssignStmt{var name='a', expToAssign=ArithmeticExpression{exp1=VariableExpression{variableExp='a'} + , exp2=ValueExpression{value=77}}}, elseStmt=AssignStmt{var name='b', expToAssign=ArithmeticExpression{exp1=VariableExpression{variableExp='b'} - , exp2=ValueExpression{value=77}}}}, stmt2=CompoundStmt{stmt1=PrintStmt{exp=VariableExpression{variableExp='a'}}, stmt2=PrintStmt{exp=VariableExpression{variableExp='b'}}}}

Symbol Table: 
a -> 100
bool2 -> false
b -> 100
bool1 -> true

Output List: 

File Table: 

END

ExeStack: 
CompoundStmt{stmt1=PrintStmt{exp=VariableExpression{variableExp='a'}}, stmt2=PrintStmt{exp=VariableExpression{variableExp='b'}}}
IfStmt{expToEval=LogicalExpression{e1=VariableExpression{variableExp='bool1'} &&  e2=VariableExpression{variableExp='bool2'}}, thenStmt=AssignStmt{var name='a', expToAssign=ArithmeticExpression{exp1=VariableExpression{variableExp='a'} + , exp2=ValueExpression{value=77}}}, elseStmt=AssignStmt{var name='b', expToAssign=ArithmeticExpression{exp1=VariableExpression{variableExp='b'} - , exp2=ValueExpression{value=77}}}}
CompoundStmt{stmt1=PrintStmt{exp=VariableExpression{variableExp='a'}}, stmt2=PrintStmt{exp=VariableExpression{variableExp='b'}}}

Symbol Table: 
a -> 100
bool2 -> false
b -> 100
bool1 -> true

Output List: 

File Table: 

END

ExeStack: 
CompoundStmt{stmt1=PrintStmt{exp=VariableExpression{variableExp='a'}}, stmt2=PrintStmt{exp=VariableExpression{variableExp='b'}}}
AssignStmt{var name='b', expToAssign=ArithmeticExpression{exp1=VariableExpression{variableExp='b'} - , exp2=ValueExpression{value=77}}}
CompoundStmt{stmt1=PrintStmt{exp=VariableExpression{variableExp='a'}}, stmt2=PrintStmt{exp=VariableExpression{variableExp='b'}}}

Symbol Table: 
a -> 100
bool2 -> false
b -> 100
bool1 -> true

Output List: 

File Table: 

END

ExeStack: 
CompoundStmt{stmt1=PrintStmt{exp=VariableExpression{variableExp='a'}}, stmt2=PrintStmt{exp=VariableExpression{variableExp='b'}}}

Symbol Table: 
a -> 100
bool2 -> false
b -> 23
bool1 -> true

Output List: 

File Table: 

END

ExeStack: 
PrintStmt{exp=VariableExpression{variableExp='b'}}
PrintStmt{exp=VariableExpression{variableExp='a'}}
PrintStmt{exp=VariableExpression{variableExp='b'}}

Symbol Table: 
a -> 100
bool2 -> false
b -> 23
bool1 -> true

Output List: 

File Table: 

END

ExeStack: 
PrintStmt{exp=VariableExpression{variableExp='b'}}

Symbol Table: 
a -> 100
bool2 -> false
b -> 23
bool1 -> true

Output List: 
100

File Table: 

END

ExeStack: 

Symbol Table: 
a -> 100
bool2 -> false
b -> 23
bool1 -> true

Output List: 
100
23

File Table: 

END

ExeStack: 
CompoundStmt{stmt1=VarDeclStmt{variable name='varf', variable type=string}, stmt2=CompoundStmt{stmt1=AssignStmt{var name='varf', expToAssign=ValueExpression{value=C:\Users\Sergiu\Desktop\SEM3\metode_avansate_de_programare\A3\A3_interpreter_file\test.in}}, stmt2=CompoundStmt{stmt1=OpenReadFileStmt{exp=VariableExpression{variableExp='varf'}}, stmt2=CompoundStmt{stmt1=VarDeclStmt{variable name='varc', variable type=integer}, stmt2=CompoundStmt{stmt1=ReadFileStmt{exp=VariableExpression{variableExp='varf'}, varName='varc'}, stmt2=CompoundStmt{stmt1=PrintStmt{exp=VariableExpression{variableExp='varc'}}, stmt2=CompoundStmt{stmt1=ReadFileStmt{exp=VariableExpression{variableExp='varf'}, varName='varc'}, stmt2=CompoundStmt{stmt1=PrintStmt{exp=VariableExpression{variableExp='varc'}}, stmt2=CloseReadFileStmt{exp=VariableExpression{variableExp='varf'}}}}}}}}}}

Symbol Table: 

Output List: 

File Table: 

END

ExeStack: 
CompoundStmt{stmt1=AssignStmt{var name='varf', expToAssign=ValueExpression{value=C:\Users\Sergiu\Desktop\SEM3\metode_avansate_de_programare\A3\A3_interpreter_file\test.in}}, stmt2=CompoundStmt{stmt1=OpenReadFileStmt{exp=VariableExpression{variableExp='varf'}}, stmt2=CompoundStmt{stmt1=VarDeclStmt{variable name='varc', variable type=integer}, stmt2=CompoundStmt{stmt1=ReadFileStmt{exp=VariableExpression{variableExp='varf'}, varName='varc'}, stmt2=CompoundStmt{stmt1=PrintStmt{exp=VariableExpression{variableExp='varc'}}, stmt2=CompoundStmt{stmt1=ReadFileStmt{exp=VariableExpression{variableExp='varf'}, varName='varc'}, stmt2=CompoundStmt{stmt1=PrintStmt{exp=VariableExpression{variableExp='varc'}}, stmt2=CloseReadFileStmt{exp=VariableExpression{variableExp='varf'}}}}}}}}}
VarDeclStmt{variable name='varf', variable type=string}
CompoundStmt{stmt1=AssignStmt{var name='varf', expToAssign=ValueExpression{value=C:\Users\Sergiu\Desktop\SEM3\metode_avansate_de_programare\A3\A3_interpreter_file\test.in}}, stmt2=CompoundStmt{stmt1=OpenReadFileStmt{exp=VariableExpression{variableExp='varf'}}, stmt2=CompoundStmt{stmt1=VarDeclStmt{variable name='varc', variable type=integer}, stmt2=CompoundStmt{stmt1=ReadFileStmt{exp=VariableExpression{variableExp='varf'}, varName='varc'}, stmt2=CompoundStmt{stmt1=PrintStmt{exp=VariableExpression{variableExp='varc'}}, stmt2=CompoundStmt{stmt1=ReadFileStmt{exp=VariableExpression{variableExp='varf'}, varName='varc'}, stmt2=CompoundStmt{stmt1=PrintStmt{exp=VariableExpression{variableExp='varc'}}, stmt2=CloseReadFileStmt{exp=VariableExpression{variableExp='varf'}}}}}}}}}

Symbol Table: 

Output List: 

File Table: 

END

ExeStack: 
CompoundStmt{stmt1=AssignStmt{var name='varf', expToAssign=ValueExpression{value=C:\Users\Sergiu\Desktop\SEM3\metode_avansate_de_programare\A3\A3_interpreter_file\test.in}}, stmt2=CompoundStmt{stmt1=OpenReadFileStmt{exp=VariableExpression{variableExp='varf'}}, stmt2=CompoundStmt{stmt1=VarDeclStmt{variable name='varc', variable type=integer}, stmt2=CompoundStmt{stmt1=ReadFileStmt{exp=VariableExpression{variableExp='varf'}, varName='varc'}, stmt2=CompoundStmt{stmt1=PrintStmt{exp=VariableExpression{variableExp='varc'}}, stmt2=CompoundStmt{stmt1=ReadFileStmt{exp=VariableExpression{variableExp='varf'}, varName='varc'}, stmt2=CompoundStmt{stmt1=PrintStmt{exp=VariableExpression{variableExp='varc'}}, stmt2=CloseReadFileStmt{exp=VariableExpression{variableExp='varf'}}}}}}}}}

Symbol Table: 
varf -> 

Output List: 

File Table: 

END

ExeStack: 
CompoundStmt{stmt1=OpenReadFileStmt{exp=VariableExpression{variableExp='varf'}}, stmt2=CompoundStmt{stmt1=VarDeclStmt{variable name='varc', variable type=integer}, stmt2=CompoundStmt{stmt1=ReadFileStmt{exp=VariableExpression{variableExp='varf'}, varName='varc'}, stmt2=CompoundStmt{stmt1=PrintStmt{exp=VariableExpression{variableExp='varc'}}, stmt2=CompoundStmt{stmt1=ReadFileStmt{exp=VariableExpression{variableExp='varf'}, varName='varc'}, stmt2=CompoundStmt{stmt1=PrintStmt{exp=VariableExpression{variableExp='varc'}}, stmt2=CloseReadFileStmt{exp=VariableExpression{variableExp='varf'}}}}}}}}
AssignStmt{var name='varf', expToAssign=ValueExpression{value=C:\Users\Sergiu\Desktop\SEM3\metode_avansate_de_programare\A3\A3_interpreter_file\test.in}}
CompoundStmt{stmt1=OpenReadFileStmt{exp=VariableExpression{variableExp='varf'}}, stmt2=CompoundStmt{stmt1=VarDeclStmt{variable name='varc', variable type=integer}, stmt2=CompoundStmt{stmt1=ReadFileStmt{exp=VariableExpression{variableExp='varf'}, varName='varc'}, stmt2=CompoundStmt{stmt1=PrintStmt{exp=VariableExpression{variableExp='varc'}}, stmt2=CompoundStmt{stmt1=ReadFileStmt{exp=VariableExpression{variableExp='varf'}, varName='varc'}, stmt2=CompoundStmt{stmt1=PrintStmt{exp=VariableExpression{variableExp='varc'}}, stmt2=CloseReadFileStmt{exp=VariableExpression{variableExp='varf'}}}}}}}}

Symbol Table: 
varf -> 

Output List: 

File Table: 

END

ExeStack: 
CompoundStmt{stmt1=OpenReadFileStmt{exp=VariableExpression{variableExp='varf'}}, stmt2=CompoundStmt{stmt1=VarDeclStmt{variable name='varc', variable type=integer}, stmt2=CompoundStmt{stmt1=ReadFileStmt{exp=VariableExpression{variableExp='varf'}, varName='varc'}, stmt2=CompoundStmt{stmt1=PrintStmt{exp=VariableExpression{variableExp='varc'}}, stmt2=CompoundStmt{stmt1=ReadFileStmt{exp=VariableExpression{variableExp='varf'}, varName='varc'}, stmt2=CompoundStmt{stmt1=PrintStmt{exp=VariableExpression{variableExp='varc'}}, stmt2=CloseReadFileStmt{exp=VariableExpression{variableExp='varf'}}}}}}}}

Symbol Table: 
varf -> C:\Users\Sergiu\Desktop\SEM3\metode_avansate_de_programare\A3\A3_interpreter_file\test.in

Output List: 

File Table: 

END

ExeStack: 
CompoundStmt{stmt1=VarDeclStmt{variable name='varc', variable type=integer}, stmt2=CompoundStmt{stmt1=ReadFileStmt{exp=VariableExpression{variableExp='varf'}, varName='varc'}, stmt2=CompoundStmt{stmt1=PrintStmt{exp=VariableExpression{variableExp='varc'}}, stmt2=CompoundStmt{stmt1=ReadFileStmt{exp=VariableExpression{variableExp='varf'}, varName='varc'}, stmt2=CompoundStmt{stmt1=PrintStmt{exp=VariableExpression{variableExp='varc'}}, stmt2=CloseReadFileStmt{exp=VariableExpression{variableExp='varf'}}}}}}}
OpenReadFileStmt{exp=VariableExpression{variableExp='varf'}}
CompoundStmt{stmt1=VarDeclStmt{variable name='varc', variable type=integer}, stmt2=CompoundStmt{stmt1=ReadFileStmt{exp=VariableExpression{variableExp='varf'}, varName='varc'}, stmt2=CompoundStmt{stmt1=PrintStmt{exp=VariableExpression{variableExp='varc'}}, stmt2=CompoundStmt{stmt1=ReadFileStmt{exp=VariableExpression{variableExp='varf'}, varName='varc'}, stmt2=CompoundStmt{stmt1=PrintStmt{exp=VariableExpression{variableExp='varc'}}, stmt2=CloseReadFileStmt{exp=VariableExpression{variableExp='varf'}}}}}}}

Symbol Table: 
varf -> C:\Users\Sergiu\Desktop\SEM3\metode_avansate_de_programare\A3\A3_interpreter_file\test.in

Output List: 

File Table: 

END

ExeStack: 
CompoundStmt{stmt1=VarDeclStmt{variable name='varc', variable type=integer}, stmt2=CompoundStmt{stmt1=ReadFileStmt{exp=VariableExpression{variableExp='varf'}, varName='varc'}, stmt2=CompoundStmt{stmt1=PrintStmt{exp=VariableExpression{variableExp='varc'}}, stmt2=CompoundStmt{stmt1=ReadFileStmt{exp=VariableExpression{variableExp='varf'}, varName='varc'}, stmt2=CompoundStmt{stmt1=PrintStmt{exp=VariableExpression{variableExp='varc'}}, stmt2=CloseReadFileStmt{exp=VariableExpression{variableExp='varf'}}}}}}}

Symbol Table: 
varf -> C:\Users\Sergiu\Desktop\SEM3\metode_avansate_de_programare\A3\A3_interpreter_file\test.in

Output List: 

File Table: 
C:\Users\Sergiu\Desktop\SEM3\metode_avansate_de_programare\A3\A3_interpreter_file\test.in

END

ExeStack: 
CompoundStmt{stmt1=ReadFileStmt{exp=VariableExpression{variableExp='varf'}, varName='varc'}, stmt2=CompoundStmt{stmt1=PrintStmt{exp=VariableExpression{variableExp='varc'}}, stmt2=CompoundStmt{stmt1=ReadFileStmt{exp=VariableExpression{variableExp='varf'}, varName='varc'}, stmt2=CompoundStmt{stmt1=PrintStmt{exp=VariableExpression{variableExp='varc'}}, stmt2=CloseReadFileStmt{exp=VariableExpression{variableExp='varf'}}}}}}
VarDeclStmt{variable name='varc', variable type=integer}
CompoundStmt{stmt1=ReadFileStmt{exp=VariableExpression{variableExp='varf'}, varName='varc'}, stmt2=CompoundStmt{stmt1=PrintStmt{exp=VariableExpression{variableExp='varc'}}, stmt2=CompoundStmt{stmt1=ReadFileStmt{exp=VariableExpression{variableExp='varf'}, varName='varc'}, stmt2=CompoundStmt{stmt1=PrintStmt{exp=VariableExpression{variableExp='varc'}}, stmt2=CloseReadFileStmt{exp=VariableExpression{variableExp='varf'}}}}}}

Symbol Table: 
varf -> C:\Users\Sergiu\Desktop\SEM3\metode_avansate_de_programare\A3\A3_interpreter_file\test.in

Output List: 

File Table: 
C:\Users\Sergiu\Desktop\SEM3\metode_avansate_de_programare\A3\A3_interpreter_file\test.in

END

ExeStack: 
CompoundStmt{stmt1=ReadFileStmt{exp=VariableExpression{variableExp='varf'}, varName='varc'}, stmt2=CompoundStmt{stmt1=PrintStmt{exp=VariableExpression{variableExp='varc'}}, stmt2=CompoundStmt{stmt1=ReadFileStmt{exp=VariableExpression{variableExp='varf'}, varName='varc'}, stmt2=CompoundStmt{stmt1=PrintStmt{exp=VariableExpression{variableExp='varc'}}, stmt2=CloseReadFileStmt{exp=VariableExpression{variableExp='varf'}}}}}}

Symbol Table: 
varf -> C:\Users\Sergiu\Desktop\SEM3\metode_avansate_de_programare\A3\A3_interpreter_file\test.in
varc -> 0

Output List: 

File Table: 
C:\Users\Sergiu\Desktop\SEM3\metode_avansate_de_programare\A3\A3_interpreter_file\test.in

END

ExeStack: 
CompoundStmt{stmt1=PrintStmt{exp=VariableExpression{variableExp='varc'}}, stmt2=CompoundStmt{stmt1=ReadFileStmt{exp=VariableExpression{variableExp='varf'}, varName='varc'}, stmt2=CompoundStmt{stmt1=PrintStmt{exp=VariableExpression{variableExp='varc'}}, stmt2=CloseReadFileStmt{exp=VariableExpression{variableExp='varf'}}}}}
ReadFileStmt{exp=VariableExpression{variableExp='varf'}, varName='varc'}
CompoundStmt{stmt1=PrintStmt{exp=VariableExpression{variableExp='varc'}}, stmt2=CompoundStmt{stmt1=ReadFileStmt{exp=VariableExpression{variableExp='varf'}, varName='varc'}, stmt2=CompoundStmt{stmt1=PrintStmt{exp=VariableExpression{variableExp='varc'}}, stmt2=CloseReadFileStmt{exp=VariableExpression{variableExp='varf'}}}}}

Symbol Table: 
varf -> C:\Users\Sergiu\Desktop\SEM3\metode_avansate_de_programare\A3\A3_interpreter_file\test.in
varc -> 0

Output List: 

File Table: 
C:\Users\Sergiu\Desktop\SEM3\metode_avansate_de_programare\A3\A3_interpreter_file\test.in

END

ExeStack: 
CompoundStmt{stmt1=PrintStmt{exp=VariableExpression{variableExp='varc'}}, stmt2=CompoundStmt{stmt1=ReadFileStmt{exp=VariableExpression{variableExp='varf'}, varName='varc'}, stmt2=CompoundStmt{stmt1=PrintStmt{exp=VariableExpression{variableExp='varc'}}, stmt2=CloseReadFileStmt{exp=VariableExpression{variableExp='varf'}}}}}

Symbol Table: 
varf -> C:\Users\Sergiu\Desktop\SEM3\metode_avansate_de_programare\A3\A3_interpreter_file\test.in
varc -> 15

Output List: 

File Table: 
C:\Users\Sergiu\Desktop\SEM3\metode_avansate_de_programare\A3\A3_interpreter_file\test.in

END

ExeStack: 
CompoundStmt{stmt1=ReadFileStmt{exp=VariableExpression{variableExp='varf'}, varName='varc'}, stmt2=CompoundStmt{stmt1=PrintStmt{exp=VariableExpression{variableExp='varc'}}, stmt2=CloseReadFileStmt{exp=VariableExpression{variableExp='varf'}}}}
PrintStmt{exp=VariableExpression{variableExp='varc'}}
CompoundStmt{stmt1=ReadFileStmt{exp=VariableExpression{variableExp='varf'}, varName='varc'}, stmt2=CompoundStmt{stmt1=PrintStmt{exp=VariableExpression{variableExp='varc'}}, stmt2=CloseReadFileStmt{exp=VariableExpression{variableExp='varf'}}}}

Symbol Table: 
varf -> C:\Users\Sergiu\Desktop\SEM3\metode_avansate_de_programare\A3\A3_interpreter_file\test.in
varc -> 15

Output List: 

File Table: 
C:\Users\Sergiu\Desktop\SEM3\metode_avansate_de_programare\A3\A3_interpreter_file\test.in

END

ExeStack: 
CompoundStmt{stmt1=ReadFileStmt{exp=VariableExpression{variableExp='varf'}, varName='varc'}, stmt2=CompoundStmt{stmt1=PrintStmt{exp=VariableExpression{variableExp='varc'}}, stmt2=CloseReadFileStmt{exp=VariableExpression{variableExp='varf'}}}}

Symbol Table: 
varf -> C:\Users\Sergiu\Desktop\SEM3\metode_avansate_de_programare\A3\A3_interpreter_file\test.in
varc -> 15

Output List: 
15

File Table: 
C:\Users\Sergiu\Desktop\SEM3\metode_avansate_de_programare\A3\A3_interpreter_file\test.in

END

ExeStack: 
CompoundStmt{stmt1=PrintStmt{exp=VariableExpression{variableExp='varc'}}, stmt2=CloseReadFileStmt{exp=VariableExpression{variableExp='varf'}}}
ReadFileStmt{exp=VariableExpression{variableExp='varf'}, varName='varc'}
CompoundStmt{stmt1=PrintStmt{exp=VariableExpression{variableExp='varc'}}, stmt2=CloseReadFileStmt{exp=VariableExpression{variableExp='varf'}}}

Symbol Table: 
varf -> C:\Users\Sergiu\Desktop\SEM3\metode_avansate_de_programare\A3\A3_interpreter_file\test.in
varc -> 15

Output List: 
15

File Table: 
C:\Users\Sergiu\Desktop\SEM3\metode_avansate_de_programare\A3\A3_interpreter_file\test.in

END

ExeStack: 
CompoundStmt{stmt1=PrintStmt{exp=VariableExpression{variableExp='varc'}}, stmt2=CloseReadFileStmt{exp=VariableExpression{variableExp='varf'}}}

Symbol Table: 
varf -> C:\Users\Sergiu\Desktop\SEM3\metode_avansate_de_programare\A3\A3_interpreter_file\test.in
varc -> 50

Output List: 
15

File Table: 
C:\Users\Sergiu\Desktop\SEM3\metode_avansate_de_programare\A3\A3_interpreter_file\test.in

END

ExeStack: 
CloseReadFileStmt{exp=VariableExpression{variableExp='varf'}}
PrintStmt{exp=VariableExpression{variableExp='varc'}}
CloseReadFileStmt{exp=VariableExpression{variableExp='varf'}}

Symbol Table: 
varf -> C:\Users\Sergiu\Desktop\SEM3\metode_avansate_de_programare\A3\A3_interpreter_file\test.in
varc -> 50

Output List: 
15

File Table: 
C:\Users\Sergiu\Desktop\SEM3\metode_avansate_de_programare\A3\A3_interpreter_file\test.in

END

ExeStack: 
CloseReadFileStmt{exp=VariableExpression{variableExp='varf'}}

Symbol Table: 
varf -> C:\Users\Sergiu\Desktop\SEM3\metode_avansate_de_programare\A3\A3_interpreter_file\test.in
varc -> 50

Output List: 
15
50

File Table: 
C:\Users\Sergiu\Desktop\SEM3\metode_avansate_de_programare\A3\A3_interpreter_file\test.in

END

