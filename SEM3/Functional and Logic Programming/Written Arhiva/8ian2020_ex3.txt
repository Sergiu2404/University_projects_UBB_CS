1.1) avoid double recursive call (f (car L))
(defun f(L)
  (cond
	((null L) nil)
	( (>(f (car L)) 2) (+ (car L) (f (cdr L))) )
	( T (f (car L)) )
  )
)
SOL:
(defun f(L)
  ((lambda(Li)
    (cond
	((null L) nil)
	( (> Li 2) (+ (car L) (f (cdr L))) )
	( T Li )
    )
  )
  (f (car L))
  )
)

1.2) 
f([],0).
f([H|T], S):- f(T, S1), H<S1, !, S is S + H.
f([_|T], S):- f(T, S1), S is S1+2.

SOL:
f([],0).
f([H|T], S):- f(T, S1), f_aux(H, S1, S).
f_aux(H, S1, S):- H<S1, !, S is S + H.
f_aux(_, S1, S):- S is S1 + 2.

1.3)
(defun f(X &rest Y)
  (cond
	((null Y) X)
	( T (append X (mapcar #'car Y) )
  )
)
% Result of (append (f '(1 2)) (f '(3 4) '(5 6) '(7 8))) = ?
% (f '(1 2)) is '(1 2)
% (f '(3 4) '(5 6) '(7 8)): here Y would take the list of the rest of the arguments, so 
% X='(3 4) and Y='((5 6) (7 8)), mapcar means mapping through elems of Y, (5 6) (7 8)
% and applies function car to both of them, applying on first -> 5, aplying on seocnd->7
=> (3 4 5 7)


1.4)
p(1). p(2). q(1). q(2). r(1). r(2).
s:- !, p(X), q(Y), r(Z), write(X,Y,Z), nl.
Result is: 
1 1 1
1 1 2 ... 
2 2 2


II) Subsets of length >= 1 of a list, having sum of elements div to 3
sum([], 0).
sum([H|T], S):-
	sum(T, S1),
	S is S1 + H.

subsets([H|T], [H|Rest]) :- subsets(T, Rest). %form subsets of elems from the list
subsets([_|T], R) :- subsets(T, R). %skip case
subsets([], []). %base case


one_sol(L, N, R):-
	subsets(L, Sub),
	sum(Sub, S),
	S mod 3 = 0,
	length(Sub, Len),
	Len >= 1,
	R is Sub.

all_sols(L, N, R):-
	findall(PS, one_sol(L, N, PS), R).



III)
(defun replace(L k)
  (cond
	( (null L) nil )
	( (and (atom L) (/= 0 (mod n k))) L ) ;if n%k != 0 and atom(L) let the same element
	( (atom L) 0 )
	( T (mapcar #'( lambda(Li) (replace L (- k 1)) )
	    L 
	    )
	)
  )
)
