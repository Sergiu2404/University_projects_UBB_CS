I
1.1)avoid double recursive call (f (car l))
(defun f(l)
  (cond
	( (atom l) -1 )
	( (> (f (car l)) 0) (+ (car l) (f (car l)) (f (cdr l))) )
	( T (f (cdr l)) )
  )
)
SOL:
(defun f(l)
 ((lambda(Li) 
  (cond
	( (atom l) -1 )
	( (> Li 0) (+ (car l) Li) (f (cdr l))) )
	( T (f (cdr l)) )
  )
 ) (f (car l)))
)


1.2) avoid multiple recursive call f(K1, Y)
f(1, 1)!.
f(K, X):- K1 is K-1, f(K1, Y), Y>1, !, K2 is K1-1, X is K2.
f(K, X):- K1 is K-1, f(K1, Y), Y>0.5, !, X is Y.
f(K, X):- K1 is K-1, f(K1, Y), X is Y-1.

SOL:
f(1, 1)!.
f(K, X):- K1 is K-1, f(K1, Y), f_aux(K, Y, X).
f(K, X):- K1 is K-1, f_aux(K, Y, X).
f(K, X):- K1 is K-1, f_aux(K, Y, X).
f_aux(K, Y, X):- Y>1, !, K2 is K1-1, !, X is K2.
f_aux(K, Y ,X):- Y>0.5, !, X is Y.
f_aux(K, Y, X):- X is Y-1.


1.3)
(defun G(F L)
	(funcall F L)
)
Result of (G #'(lambda(L) (G #'cdr L)) '(1 2 3))=?
SOL: At the predefined function funcall, its arguments are G's function arguments, but
among them should also be the name of a function, so the program does not know what
function to call. Hence, the program raises an error.





1.4)
p(1). p(2). q(1). q(2). r(1). r(2).
s:- p(X), !, q(X), r(Z), write(X, Y, Z), nl.
% Since the cut is put after the p(X) predicate, program will search only for one solution
% for the p(X) predicate => first found = 1. For the other predicates, the program will
% backtrack through all the possible results, so will take:
1 1 1
1 2 1
1 1 2
1 2 2


II
product([], 1).
product([H|T], P):-
	product(T, P1),
	P is P1 * H.

insert(E, L, [E|L]).
insert(E, [H|T], [H|R]):-
	insert(E, T, R).

arr([H|_], 1, [H]).
arr([H|T], K, [H|R]):-
	K > 1,
	K1 is K - 1,
	arr(T, K1, R1),
	insert(H, R1, R).
arr([_|T], K, R):- %skip elem case
	arr(T, K, R).

one_sol(L, K, V, R):-
	arr(L, K, Arr),
	product(Arr, P),
	P < V, %the product is less than the given value V
	R is Arr.

all_sols(L, K, V, R):-
	findall(PS, one_sol(L, K, V, PS), R).



III
(defun replace(L)
  (cond
	( (null L) nil )
	( (and (numberp L) ( = 0 (mod L 2) )) (+ L 1) )
	( (atom L) L )
	( T (mapcar #'replace L) )
  )
)