I
1.1) avoi rec call (F (car L)) 2)
(defun F(L)
  (cond
	( (null L) 0 )
	( (> (F (car L)) 2) (+ (car L) (cdr L)) )
	( t (F (car L)))
  )
)
SOL:
(defun F(L)
 ( (lambda(Li)
    (cond
	( (null L) 0 )
	( (> Li 2) (+ (car L) (cdr L)) )
	( t Li )
    )
 ) (F (car L)) )
)

1.2) avoid double rec call f(T, S1) without redefining predicate
f([], 0).
f([H|T], S):- f(T, S1), H<S1, !, S is H-S1.
f([_|T], S):- f(T, S1), S is S1 + 2.

Sol: use aux predicate
f([], 0).
f([H|T], S):- f(T, S1), f_aux(H, S1, S).

f_aux(H, S1, S):- H<S1, !, S is H-S1.
f_aux(_, S1, S):- S is S1 + 2.


1.3)
(defun F(X &REST Y)
  (cond
	( (null Y) X )
	( t (append X (mapcar #'car Y)) )
  )
)
result of (append (F '(1 2)) (F '(3 4) '(5 6) '(7 8)))
; (F '(1 2)) => (1 2)
;  (F '(3 4) '(5 6) '(7 8)) =>X = '(3 4), &rest Y = '((5 6) (7 8)) => (3 4 5 7)
; => (append (F '(1 2)) (F '(3 4) '(5 6) '(7 8))) => (1 2 3 4 5 7)

1.4)
p(1). p(2). q(1). q(2). r(1). r(2).
s:- !, p(X), q(Y), r(Z), write(X, Y, Z), nl.
% the cut after the function definition is a green cut(occurs after a succesfull goal)that
% prevents backtracking to the instructions before the cut is used. So the output is generated by
% prolog using backtracking through all the predicates p(1). p(2). q(1). q(2). r(1). r(2).
So output is: 111, 112, 121, 122, 211, 212, 221, 222


II
%math model subsets(l1...ln) = [], if n=0
			     = l1 U subsets(l2...ln), if n>0
			     = subsets(l2...ln), if n>0
subs([], []).
subs([H|T], [H|R]):- subs(T, R).
subs([_|T], R):- subs(T, R).

len([], 0).
len([_|T], Len):- len(T, Len1), Len is Len1 + 1.

sum([], 0).
sum([H|T], R):- sum(T, R1), R is H + R1.

one_sol(L, N, R):-
	subs(L, R1),
	len(R1, RLen),
	RLen >= N,
	sum(R1, S),
	S mod 3 =:= 0.

allSols(L, N, R):-
	findall(PS, one_sol(L, N, PS), R).


III
%math model: replace(L1...Ln, k) = [], if n=0
				 = L, if atom(L) and n%k != 0
				 = 0, if atom(L) and n%k==0
				 = replace(L2...Ln, k-1) U replace(L3...Ln, k-1) U ..., otherwise

(defun replace(L k)
  (cond
	( (null L) nil )
	( (and (atom L) (/= 0 (mod n k))) L ) ;if n%k != 0 and atom(L) let the same element
	( (atom L) 0 )
	( T (mapcar #'( lambda(Li) (replace L (- k 1)) )
	    L 
	    )
	)
  )
)