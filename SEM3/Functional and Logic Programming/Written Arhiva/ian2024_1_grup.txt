I
1.1) replace (funcall F (car L))

(defun fct(F L)
  (cond
    ( (null L) nil )
    ( (funcall F (car L)) (cons (funcall F (car L)) (fct F (cdr L))) )
    ( t nil )
  )
)
SOL:
(defun fct(F L)
 ((lambda(a)
  (cond
    ( (null L) nil )
    ( a (cons a (fct F (cdr L))) )
    ( t nil )
  )
 ) (funcall F (car L)) )
)

1.2) avoid f(T, S1)
f([], -1).
f([H|T], S):- H>0, f(T, S1), S1<H, !, S is H.
f([_|T], S):- f(T, S1), S is S1.
SOL:
With aux:
f([], -1).
f([H|T], S):- H>0, f(T, S1), f_aux(H, S1, S).

f_aux(H, S1, S):- S1<H, !, S is H.
f_aux(_, S, S).

Without aux:
f([], -1).
f([H|T], S):- f(T, S1), S1 > 0, S1 > H, !, S is S1.
f([H|_], S):- H > 0, !, S is H.
f([_|_], S):- S is -1.

% f(l1,...,ln): -1, n == 0
% f(l1,...,ln): f(l2,...,ln), l1 < f(l2,...,ln) and f(l2,...,ln) > 0
% f(l1,...,ln): l1, l1 > 0
% f(l1,...,ln): -1, l1 < 0

% obs ca f returneaza cel mai mare nr pozitiv din lista sau -1 daca nu exista nr pozitive



1.3)
(defun G(L)
  (list (car L) (car L))
)
(setq q 'G)
(setq p q)
(funcall p '(A B C))


1.4) what is the result?
f([], 0).
f([H|T], S):- f(T, S1), S1 is S-H.
f([1, 2, 3, 4, 5, 6, 7, 8], S).
% will result in an error, bc inside predicate f, S1 takes
% the value of S - H, but S is not known yet, since the recursion is made until the list is empty
% for calculating the difference of all the numbers, should have been: S is S1 - H.


II) given natural number n, generate all sets of prime numbers that add up to n

generateNum(0, []). %generate list of positive nums <= N
generateNum(N, [N|R]):- N > 0, N1 is N - 1, generateNum(N1, R).

mySort([H1, H2|T], [H1|R]):- %sort the generateNum list(not necessarly)
    H1 <= H2,
    mySort([H2|T],R).
mySort([H1, H2|T], [H2|R]):-
    mySort([H1|T], R).
mySort([H], [H]).
mySort([], []).

primes(2):- !. %check if number is prime
primes(3):- !.
primes(H):- H>3, H mod 2 =\= 0, has_factor(H, 3).

has_factor(H, F):- F * F =< H, (H mod F =:= 0 ; H mod (F + 2) =:= 0), !.
has_factor(H, F):- F * F <= H, F1 is F + 1, has_factor(H, F1), !.

check_primeList([]). %check if list is prime
check_primeList([H|T]):- primes(H), check_primeList(T). 
	

subset([], []). %generate subsets of different length
subset([H|T], [H|R]):- subset(T, R1).
subset([_|T], R):- subset(T, R1). 

one_sol(L, R):-
	subset(L, R1),
	check_primeList(R1),
	R is R1.

all_sols(N, R):-
	generateNum(N, L),
	mySort(L, Sorted), %not necessarly
	findall(PS, one_sol(Sorted, PS), R). %for backtracking through all solutions


III)
(defun mySubst(L e counter)
  (cond
	( (null L) nil )
	( (and (atom L) (= (mod counter 2) 1)) e )
	( (atom L) (L) )
	( t ( mapcar #'(lambda(Li) (mySubst Li e (+ counter 1))) L ) )
  )
)

(defun main(L e)
  (mySubst L e 0)
)
